worker_processes	auto; # Number of cores available to the machine.
pid /var/run/nginx.pid;

events {
	worker_connections 8192;
}

http {

	map $request_method $limit {
		default					"";
		POST						$binary_remote_addr;
	}
	##
	# Basic Settings
	##

	# Set the IP from AWS ELB
	real_ip_header X-Forwarded-For;
	set_real_ip_from 0.0.0.0/0;
	real_ip_recursive on;

	# Changed from cloudfront-specific logic within Altis nginx docker image.
	map $server_port $fastcgi_https {
		8443 on;
		default '';
	}

	# sendfile doesn't work well on vagrant - caching side effects
	sendfile off;

	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 65;
	types_hash_max_size 2048;
	# Hide nginx and OS version information from headers in responses
	server_tokens off;

	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	##
	# Logging Settings
	##

	log_format detailed '$remote_addr - $remote_user [$time_local] '
						'$host "$request" $status $bytes_sent '
						'"$http_referer" "$http_user_agent" "$gzip_ratio" reponse-time="$upstream_response_time" cache-status=$upstream_cache_status batcache-status=$sent_http_x_batcache';

	access_log off;
	error_log /dev/stderr info;

	client_header_timeout 7s;
	client_body_timeout 7s;

	##
	# Gzip Settings
	##

	gzip on;
	gzip_disable "msie6";

	# gzip_vary on;
	gzip_proxied any;
	# gzip_comp_level 6;
	# gzip_buffers 16 8k;
	# gzip_http_version 1.1;
	gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript application/x-font-ttf font/opentype application/vnd.ms-fontobject image/svg+xml;

	# rate limiting used for login etc
	limit_req_zone	$limit	zone=two:10m	 rate=15r/m;
	limit_req_zone	$limit	zone=xmlrpc:10m		rate=20r/m;
	limit_req_status 429;

	server {
		# Listen on port > 1024 because we run as less-privileged user `nginx`.
		# 8080 is mapped to 80 in docker-compose.yml.
		listen 8080;

		# Load project-specific settings for server_name.
		include /usr/src/app/.config/nginx-http.conf;

		return 301 https://$host$request_uri;
	}

	server {
		# Listen on port > 1024 because we run as less-privileged user `nginx`.
		# 8443 is mapped to 443 in docker-compose.yml.
		listen 8443 ssl;

		# Load project-specific settings for ssl_certificate and server_name.
		include /usr/src/app/.config/nginx-https.conf;

		ssl_protocols TLSv1.2;
		ssl_prefer_server_ciphers on;
		ssl_dhparam /etc/nginx/ssl/dhparam.pem;
		ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
		ssl_ecdh_curve secp384r1;
		ssl_session_timeout  10m;
		ssl_session_cache shared:SSL:10m;

		client_max_body_size 50M;
		root /usr/src/app;

		index index.php index.html;

		# Load a custom nginx-config if such a thing exists.
		include /usr/src/app/.config/nginx-additions*.conf;

		# rewrite for multiple sub-domain sets
		if ( -d /usr/src/app/wordpress ) {
			rewrite (/wp-(admin|includes)/(.*))$ /wordpress$1 last;
			rewrite (/wp-[^/]*\.php)$ /wordpress$1 last;
			rewrite (/xmlrpc\.php)$ /wordpress$1 last;
		}

		# rewrite for multisite in subdirs, e.g. example.com/subsite1/
		# if the file doesn't exist for wp-admin/* or wp-*.php, try looking in the parent dir
		if ( !-e $request_filename ) {
			rewrite /wp-admin$ $scheme://$host$uri/ permanent;
			rewrite ^(/[^/]+)?(/wp-.*) $2 last;
			rewrite ^(/[^/]+)?(/.*\.php) $2 last;
		}

		# Redirect 403 responses to a 404 response.
		error_page 403 =404 @404;

		location @404 {
			add_header X-Frame-Options "SAMEORIGIN" always;
			add_header X-XSS-Protection "1; mode=block" always;
			add_header X-Content-Type-Options "nosniff" always;
			return 404;
		}

		# Block all web requests to hidden directories
		location ~ /\. {
			deny all;
		}

		location ~* ^/(wordpress/)?(wp-)?content/(themes|plugins|mu-plugins|plugins-mu)/.+\.php$ {
			deny all;
		}

		location ~* ^/(wordpress/)?wp-includes/(?!js/tinymce/wp-tinymce).+\.php$ {
			deny all;
		}

		# Block access to build scripts.
		location ~* /(Gruntfile\.js|package\.json|package-lock\.json|node_modules|composer.json|composer.lock) {
			deny all;
		}

		location ~* .(md|sql|sh)$ {
			deny all;
		}

		location / {
			try_files $uri $uri/ /index.php?$args;
		}

		location ~* .(json|xml)$ {
			expires max;
			try_files $uri /index.php?$args;
		}

		location ~* .(jpg|jpeg|png|gif|ico|css|js)$ {
			expires max;
		}

		# CORS for fonts
		location ~ \.(woff|woff2|eot|svg|ttf|otf)(\?.+)?$ {

			expires max;
			add_header 'Access-Control-Allow-Origin' '*';

			if ( $request_method = 'OPTIONS' ) {
				return 204;
			}
		}

		# php-fpm status page
		#
		location ~ ^/(status|ping)$ {
			access_log off;
			allow 127.0.0.1;
			deny all;
			include fastcgi_params;
			fastcgi_pass unix:/var/run/php-fpm/www.socket;
		}

		# limit login attempt to wp-login.php for bots etc. Limit is 15/minute
		location ~* wp\-login\.php {
			limit_req		zone=two	burst=1 nodelay;
			include fastcgi_settings;
		}

		# limit login attempt to xmlrpc.php for bots etc. Limit is 20/minute
		location ~* xmlrpc\.php {
			limit_req		zone=xmlrpc  burst=1 nodelay;
			include fastcgi_settings;
		}

		# pass the PHP scripts to FastCGI server listening on php:9000
		location ~ \.php$ {
			client_max_body_size 1G;

			# NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
			fastcgi_split_path_info ^(.+\.php)(/.+)$;

			# Check the PHP file exists before passing to FastCGI
			try_files $uri =404;

			include fastcgi_settings;
		}
	}
}
